//HELLO WORLD by http://codeforces.com/profile/Programmer
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF=1e18;
typedef double d;
typedef long double lld;

ll my_pow (ll a, ll n) {
    int res = 1;
    while (n)
        if (n & 1) { res *= a; --n; }
        else { a *= a; n >>= 1; }
    return res; }
const int MAXN = 1100, MAXM = 11000;
int cl[MAXN];
bool used[MAXN];
vector <int> g[MAXN], gr[MAXN], topsort;
vector <pair <int, int> > ribs;
void DFS_sort(int v)
{
    used[v] = true;
    for (auto it:g[v])
        if (!used[it])
            DFS_sort(it);
    topsort.push_back(v);
}
void DFS_condens(int v, int color)
{
    cl[v] = color;
    for (auto it:gr[v])
        if (!cl[it])
            DFS_condens(it, color);
}
vector <int> rib[MAXM];
void dfs(int v, int p, int to)
{
    used[v] = true;
    for (auto it:rib[v])
    {
        if (v == p && it == to)
            continue;
        if (!used[it])
            dfs(it, p, to);
    }
}
int main()
{
    //freopen("input.txt", "r", stdin);
    int n, m, h, x, y;
    cin>>n>>m;
    set <pair<int, int> > st;
    for (int i = 0; i < m; i++)
    {
        cin>>x>>y;
        g[x].push_back(y);
        gr[y].push_back(x);
        st.insert({x, y});
    }
    for (auto it:st)
        {
            x = it.first;
            y = it.second;
            ribs.push_back({x, y});
        }
    for (int i = 1; i <= n; i++)
        if (!used[i])
            DFS_sort(i);
    int color = 1;
    for (int i = (int)topsort.size()-1; i >= 0; i--)
        if (!cl[topsort[i]])
        {
            DFS_condens(topsort[i], color++);
        }
    vector <int> s[color];
    for (int i = 1; i <= n; i++)
        s[cl[i]].push_back(i);
    vector <pair<int, int> > ans;
    for (int i = 1; i < color; i++)
        {
            if (s[i].size()  < 2)
                continue;
            s[i].push_back(s[i][0]);
            for (int j = 1; j < s[i].size(); j++)
                ans.push_back({s[i][j-1], s[i][j]});
        }
    vector <pair<int, int> > v;
    for (auto it:ribs)
    {
        x = it.first;
        y = it.second;
        if (cl[x] != cl[y])
            rib[cl[x]].push_back(cl[y]);
    }
    for (auto it:ribs)
    {
        x = it.first;
        y = it.second;
        if (cl[x] != cl[y])
        {
            for (int i = 1; i < color; i++)
                used[i] = false;
            dfs(cl[x], cl[x], cl[y]);
            if (!used[cl[y]])
                ans.push_back({x, y});
        }
    }
    cout<<ans.size()<<'\n';
    for (auto it:ans)
        cout<<it.first<<" "<<it.second<<" ";
return 0;
}
