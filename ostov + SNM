/*ЗАПУСКАЕМ
░ГУСЯ░▄▀▀▀▄░РАБОТЯГУ░░
▄███▀░◐░░░▌░░░░░░░
░░░░▌░░░░░▐░░░░░░░
░░░░▐░░░░░▐░░░░░░░
░░░░▌░░░░░▐▄▄░░░░░
░░░░▌░░░░▄▀▒▒▀▀▀▀▄
░░░▐░░░░▐▒▒▒▒▒▒▒▒▀▀▄
░░░▐░░░░▐▄▒▒▒▒▒▒▒▒▒▒▀▄
░░░░▀▄░░░░▀▄▒▒▒▒▒▒▒▒▒▒▀▄
░░░░░░▀▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄▀▄
░░░░░░░░░░░▌▌░▌▌░░░░░
░░░░░░░░░░░▌▌░▌▌░░░░░
░░░░░░░░░▄▄▌▌▄▌▌░░░░░*/
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF=1e18;
typedef double d;
typedef long double lld;
ll my_pow (ll a, ll n) {
    int res = 1;
    while (n)
        if (n & 1) { res *= a; --n; }
        else { a *= a; n >>= 1; }
    return res; }
const int MAXN = 1e5;
struct rib
{
    int u, v, c;
};
bool comp(rib a, rib b)
{
    return a.c < b.c;
}
vector <int> color(MAXN), components[MAXN];
void Union(int v, int u)
{
    if (components[v].size() > components[u].size())
        swap(v, u);
    for (auto it:components[v])
        color[it] = u;
    for (auto it:components[v])
        components[u].push_back(it);
    components[v].clear();
}
int main()
{
    freopen("input.txt", "r", stdin);
    int n, m, x, y, c;
    cin>>n>>m;
    vector <rib> v;
    for (int i = 0; i < m; ++i)
    {
        cin>>x>>y>>c;
        rib t;
        t.u = x+1;
        t.v = y+1;
        t.c = c;
        v.push_back(t);
    }
    sort(v.begin(), v.end(), comp);
    for (int i = 1; i <= n; ++i)
    {
        color[i] = i;
        components[i].push_back(i);
    }
    int ribs = 0, ans = 0;
    for (auto it:v)
    {
        if (color[it.u] != color[it.v])
        {
            ribs++;
            ans += it.c;
            Union(color[it.v], color[it.u]);
        }
    }
    if (ribs != n-1)
        cout<<"NON-CONNECTED"<<endl;
    else
        cout<<ans<<endl;
return 0;
}
