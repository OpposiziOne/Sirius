//HELLO WORLD by http://codeforces.com/profile/Programmer
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF=1e18;
typedef long double lld;

ll my_pow (ll a, ll n) {
    int res = 1;
    while (n)
        if (n & 1) { res *= a; --n; }
        else { a *= a; n >>= 1; }
    return res; }
const int MAXN = 1e5;
int d[MAXN], fup[MAXN];
bool used[MAXN];
set <int> st;
vector <int> g[MAXN], ans;
int children;
void DFS(int v, int p)
{
    if (p == -1)
        d[v] = 1;
    else
        d[v] = d[p] + 1;
    used[v] = true;
    fup[v] = d[v];
    for (auto to:g[v])
    {
        if (to == p)
            continue;
        if (used[to])
            fup[v] = min(fup[v], d[to]);
        else
        {
            DFS(to, v);
            fup[v] = min(fup[v], fup[to]);
            if (p == -1)
                children++;
            else if (d[v] <= fup[to])
                st.insert(v);
        }
    }
}

void dfs(int v, int p)
{
    used[v] = true;
    for (auto it:g[v])
        if (!used[it] && it != p)
            dfs(it, p);
}

int main()
{
    freopen("input.txt", "r", stdin);
    int n, m, x, y, start, finish;
    cin>> n >> m;
    for (int i = 0; i < m; i++)
    {
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    DFS(1, -1);
    cin>>start>>finish;
    vector <int> v;
    if (children > 1)
        st.insert(1);
    for (auto it:st)
    {
        if (it == start || it == finish)
            continue;
        for (int i = 1; i <= n; i++)
            used[i] = false;
        dfs(start, it);
        if (!used[finish])
            v.push_back(it);
    }
    cout<<v.size()<<'\n';
    for (auto it:v)
        cout<<it<<" ";
return 0;
}
